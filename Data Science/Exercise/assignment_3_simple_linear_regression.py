# -*- coding: utf-8 -*-
"""Copy of   Assignment 3: Simple linear regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HFGS2tmQ9X5QLb8Y2A3GqMGL3zIKeEP4

#Assignment 3
Name: Sulaiman Alfarsi
"""

from google.colab import files
f =files.upload()

import pandas as pd

df = pd.read_csv('Assignment2.csv')

# Display the first few rows of the DataFrame
print(df.head())


# Split the dataset into input features (X) and target variable (y)
X = df[['Temperature (Celsius)']]
y = df['Energy Consumption (kWh)']

import pandas as pd
from sklearn.linear_model import LinearRegression

df = pd.read_csv('Assignment2.csv')

# Display the first few rows of the DataFrame
print(df.head())


# Split the dataset into input features (X) and target variable (y)
X = df[['Temperature (Celsius)']]
y = df['Energy Consumption (kWh)']

# Create a linear regression object
model = LinearRegression()

# Fit the model to the data
model.fit(X, y)

new_temp = [[17], [26], [32]]
predicted_scores = model.predict(new_temp)

# Print the predicted scores
for temps, score in zip(new_temp, predicted_scores):
    print(f"Temperature: {temps[0]}, Predicted Test Score: {score:.2f}")

import seaborn as sns
import matplotlib.pyplot as plt

import numpy as np
predicted_scores= np.array(predicted_scores).reshape([1, -1])
predicted_scores= predicted_scores[0]

new_temp= np.array(np.array(new_temp).reshape([1, 3])[0])

predicted_scores

# Set a beautiful Seaborn theme
sns.set_theme(style='whitegrid')

# Create a scatter plot with data points
sns.scatterplot(data=df, x='Temperature (Celsius)', y='Energy Consumption (kWh)', label='Data Points')

# Create a regression line
sns.regplot(data=df, x='Temperature (Celsius)', y='Energy Consumption (kWh)', scatter=False, color='steelblue', label='Regression Line')

# Plot the predicted values
sns.scatterplot(x=new_temp, y=predicted_scores, color='red', marker='s', s=100, label='Predicted Values')

# Set plot title and labels
plt.title('Temperature (Celsius) vs. Energy Consumption (kWh)')
plt.xlabel('Temperature (Celsius)')
plt.ylabel('Energy Consumption (kWh)')

# Add a legend
plt.legend()

# Display the plot
plt.show()

